#
# A Sample script to explore all the category of MFs available.
# ALERT: This is implemented in a very inefficient way, so it just eats up time at one level.
#   saving a unfiltered gData session and then restoring and filtering it would give much
#   better results, but for now dont mind.
# HanishKVC
#

print("A rough look at all the category of MFs available in India...")

MFNAMETOKENS_TOALLOW = [ "direct" ]
MFNAMETOKENS_TOSKIP  = [ "~PART~dividend", "-RE-(?i).*regular plan.*", "-RE-(?i).*bonus.*" ]


#
# Fetch data if required, commented out by default
#
input("Dont forget to fetch data for the date range you are interested in, if required, before using this script")
#fetch_data(2013, 2021)


#
# Process and Look at loaded data from different angles
#

def plot_show(datas, mfCodes):
	plot_data(datas, mfCodes)
	show_plot()


def get_mfcodes(mfNameTemplates):
	mfCodes = []
	for mfTmpl in mfNameTemplates:
		fullMatch, partMatch = findmatchingmf(mfTmpl)
		for mf in fullMatch:
			mfCodes.append(mf[1])
	return mfCodes


# Dip into latest data a bit, to get the list of MFTypes.
load_data(20210301, 20210307)
gMFTypes = gData['entTypes'].keys()

for mfType in gMFTypes:
	input("INFO:MFType:{}".format(mfType))
	loadfilters_setup("clean", [mfType], MFNAMETOKENS_TOALLOW, MFNAMETOKENS_TOSKIP)
	load_data(2013, 2021, loadFiltersName="clean")
	# Relative Data
	procdata_ex([ "srel=srel(data)", "dma50SRel=dma50(srel)", "dma200SRel=dma200(srel)" ])
	# Rolling Data
	procdata_ex([ "roll365=roll365(data)", "block3YR365=block1095(roll365)", "dma50Roll365=dma50(roll365)" ])
	procdata_ex([ "roll1095=roll1095(data)", "block3YR1095=block1095(roll1095)", "dma50Roll1095=dma50(roll1095)" ])
	procdata_ex([ "roll1825=roll1825(data)", "block3YR1825=block1095(roll1825)", "dma50Roll1825=dma50(roll1825)" ])
	datas = [ 'dma50SRel', 'dma200SRel', 'dma50Roll365', 'dma50Roll1095', 'dma50Roll1825' ]
	topList = analdata_simple('block3YR1095', 'top', 'block_ranked')
	topList = analdata_simple('roll1095', 'top', 'roll_avg')
	mfCodes = [ x[0] for x in topList ]
	"""
	for mfCode in mfCodes:
		plot_show(datas, [mfCode])
	"""
	for data in datas:
		plot_show(data, mfCodes)


#
# Quit if you dont want to further look at the data.
#
#quit()

